#@todo add a new section for auth
#@todo add operationIds that match the stuff thats called on the api
openapi: "3.0.0"
info:
  version: 0.0.1
  title: niftyNotary API
  license:
    name: MIT
servers:
  - url: http://localhost:3600
paths:
  /auth:
    post:
      summary: Fetch token from credentials
      tags:
        - auth
      requestBody:
        description: user stuff
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
      responses:
        201:
          description: auth token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthToken'
        500:
          description: cannae do it
  /users:
    post:
      summary: Add a new user to the system
      tags:
        - user
      requestBody:
        description: some description
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
      responses:
        201:
          description: Created new user
        400:
          description: foo #todo
        409:
          description: email already in use
  /notarise/file:
    post:
      summary: Post a new file to hash and store on Ethereum
      requestBody:
        description: Post Base64 encoded file
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Document'
      #    opeationId: notariseFile
      tags:
        - notary
      responses:
        '200':
          description: Response object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Notarised"
        '203':
          description: Transaction submitted but not mined
        '422':
          description: Hash already exists
  /notarise/hash:
    post:
      summary: Post a hash on Etherum to prove existance.
      requestBody:
        description: Hash to store onchain
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FileHash'
      #    opeationId: notariseFile
      tags:
        - notary
      responses:
        '200':
          description: Response object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Notarised"
        '203':
          description: Transaction submitted but not mined
        '422':
          description: Hash already exists
    # /notarised/transaction/{txId}
    # get:
    #   summary: Fetch ethereum transaction
  /notarised/verify:
    post:
      summary: Verify that a given file matches the given hash
      requestBody:
        description: Post Base64 encoded file and a hash
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Verifiable'
      #    opeationId: notariseFile
      tags:
        - notary
      responses:
        '200':
          description: Response object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Notarised"
        '203':
          description: Transaction submitted but not mined
  /notarised/getById/{id}:
    get:
      summary: Get notary object from db
      operationId: getNotarised #what is the operationId: for???
      tags:
        - notary
      parameters:
        - name: id
          in: path
          required: true
          description: The database key of the item to retrieve
          schema:
            type: string
          example: 123456789
      #      parameters:
      #        - name: limit
      #          in: query
      #          description: How many items to return at one time (max 100)
      #          required: false
      #          schema:
      #            type: integer
      #            format: int32
      responses:
        '200':
          description: todo should send back the same details as post
          #          headers:
          #            x-next:
          #              description: A link to the next page of responses
          #              schema:
          #                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Notarised"
  /notarised/getByTxId/{txId}:
    get:
      summary: Get notary object from db
      operationId: fetchTxByTxId #what is the operationId: for???
      tags:
        - notary
      parameters:
        - name: txId
          in: path
          required: true
          description: The tx id of the item to retrieve
          schema:
            type: string
          example: '0x1111111111111111111111111111111111'
      responses:
        '200':
          description: todo should send back the same details as post
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Notarised"
  /notarised/getByHash/{fileHash}:
    get:
      summary: Get notary object from db
      operationId: getFromHash #what is the operationId: for???
      tags:
        - notary
      parameters:
        - name: fileHash
          in: path
          required: true
          description: The hash of the item to retrieve
          schema:
            type: string
            example: '0x1111111111111111111111111111111111'
      responses:
        '200':
          description: todo should send back the same details as post
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Notarised"
  /transaction/getByTxId/{txId}:
    get:
      summary: Get notary object from db
      operationId: getFromHash #what is the operationId: for???
      tags:
        - notary
      parameters:
        - name: txId
          in: path
          required: true
          description: The hash of the tranaction receipt to retrieve
          schema:
            type: string
            example: '0x1111111111111111111111111111111111'
      responses:
        '200':
          description: an ethereum transaction receipt
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Receipt"
      #        default:
      #          description: unexpected error
      #          content:
      #            application/json:
      #              schema:
      #                $ref: "#/components/schemas/Error"
      #    post:
      #      summary: Notarise a file
      #      operationId: notariseFile
      #      tags:
      #        - notary
      #      responses:
      #        '201':
      #          description: Null response
      #        default:
      #          description: unexpected error
      #          content:
      #            application/json:
      #              schema:
      #                $ref: "#/components/schemas/Error"
      # /pets/{petId}:
      #   get:
      #     summary: Info for a specific pet
      #     operationId: showPetById
      #     tags:
      #       - pets
      #     parameters:
      #       - name: petId
      #         in: path
      #         required: true
      #         description: The id of the pet to retrieve
      #         schema:
      #           type: string
      # responses:
      #   '200':
      #     description: Expected response to a valid request
      #     content:
      #       application/json:
      #         schema:
      #           $ref: "#/components/schemas/Pet"
      #   default:
      #     description: unexpected error
      #     content:
      #       application/json:
      #         schema:
      #           $ref: "#/components/schemas/Error"
# this is ok for testing, but for when live, this should be per endpoint except fpr the hone that gets adn refreshes token
security:
  - bearerAuth: []
components:
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Verified:
      type: object
      properties:
        matches:
          type: boolean #ref to verifiable object + return what was posted
    NewUser:
      type: object
      properties:
        firstName:
          type: string
          example: foo
        lastName:
          type: string
          example: boo
        email:
          type: string,
          example: test@niftynotary.io
        password:
          type: string
          example: sometestpassword
#        permissionLevel: #at what point should weset the perms for a user
#          type: integer
#          example: 1
    NewUserResponse:
      type: object
      properties:
        id:
          type: string
    Verifiable:
      type: object
      properties:
        fileHash:
          type: string
        hashType:
          type: string
          enum: [sha256, keccak] #this should probably be its own object
        fileType:
          type: string
        file:
          type: string
    Notarised:
      type: object
      properties:
        txStatus:
          type: string
        fileHash:
          type: string
        hashType:
          type: string
          enum: [sha256, keccak] #this should probably be its own object
        docType:
          type: string
        txId:
          type: string
        chainId:
          type: string
          enum: [1]
        timestamp:
          type: string
        id:
          type: string
        explorer:
          type: string
    FileHash:
      type: object
      properties:
        hash:
          type: string
          example: '0x7c43a38c80ff272aa82209066a2fce0fcd9e15c60eb587f3692f43d9cd2c467a'
        hashType:
          type: string
          enum: [sha256, keccak]
    Document:
      type: object
      required:
        - file
        - fileType
      properties:
        file:
          type: string
        fileType:
          type: string
      example:
        file: 'SGVsbG8gV29ybGQ=' #Hello World
        fileType: 'text/plain' #maybe not best to send as json could be described otherwise
    Login:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          example: test@niftynotary.io
        password:
          type: string
          example: sometestpassword
#      example:
#        - test@niftynotary.io
#        - sometestpassword
    # fileHash:
    #   type: string
#    email:
#      type: string
#    password:
#      type: string
    AuthToken:
      type: object
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string
    txId:
      type: string
    Receipt:
      type: object
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string